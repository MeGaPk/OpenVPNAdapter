<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "0930"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "C9BB475B1E71663A00F3F98C"
               BuildableName = "OpenVPNAdapter.framework"
               BlueprintName = "OpenVPN Adapter iOS"
               ReferencedContainer = "container:OpenVPN Adapter.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      codeCoverageEnabled = "YES"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
         <TestableReference
            skipped = "NO">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "C9BB478D1E71821A00F3F98C"
               BuildableName = "OpenVPNAdapterTests.xctest"
               BlueprintName = "OpenVPN Adapter iOS Tests"
               ReferencedContainer = "container:OpenVPN Adapter.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "C9BB475B1E71663A00F3F98C"
            BuildableName = "OpenVPNAdapter.framework"
            BlueprintName = "OpenVPN Adapter iOS"
            ReferencedContainer = "container:OpenVPN Adapter.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <AdditionalOptions>
      </AdditionalOptions>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "C9BB475B1E71663A00F3F98C"
            BuildableName = "OpenVPNAdapter.framework"
            BlueprintName = "OpenVPN Adapter iOS"
            ReferencedContainer = "container:OpenVPN Adapter.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <AdditionalOptions>
      </AdditionalOptions>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "C9BB475B1E71663A00F3F98C"
            BuildableName = "OpenVPNAdapter.framework"
            BlueprintName = "OpenVPN Adapter iOS"
            ReferencedContainer = "container:OpenVPN Adapter.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
      <PostActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "#################################################################################################################################################&#10;# post-archive-script.sh&#10;#&#10;# The purpose of this script is to create a universal binary for your framework&#10;# Also - if there is a problem with steps in this script, then it should be&#10;# easy to debug!  Other scripts that this is based off of aren&apos;t so easy to debug.&#10;#&#10;#################################################################################################################################################&#10;set -e&#10;&#10;# Validate that everything is setup correctly&#10;validate() {&#10;    &#10;    # 1. Make sure the archival is coming from a workspace (not a project).&#10;    # This is because a project doesn&apos;t provide enough enviornment variables to&#10;    # correctly archive the project in the way we need to (yes, lazy programmer).&#10;    if [ &quot;${PROJECT_NAME}&quot; == &quot;&quot; ]&#10;    then&#10;    exec &gt; /tmp/${SCHEME_NAME}_archive.log 2&gt;&amp;1;&#10;    echo &quot;[ERROR]: PROJECT_NAME was not defined, did you select the &apos;Provide build settings from&apos; in the &apos;Post-actions&apos; for Archival?&quot;;&#10;    envExit 1;&#10;    &#10;    else&#10;    exec &gt; /tmp/${IBSC_MODULE}_archive.log 2&gt;&amp;1;&#10;    fi&#10;    &#10;    # Make sure the project is setup to actually archive, otherwise we don&apos;t do anything.&#10;    if [ &quot;${ARCHIVE_PRODUCTS_PATH}&quot; == &quot;&quot; ] ; then&#10;    echo &quot;[ERROR]: ARCHIVE_PRODUCTS_PATH is not defined - you probably need to set the SKIP_INSTALL build setting to NO&quot;&#10;    envExit 1;&#10;    else&#10;    echo &quot;ARCHIVE_PRODUCTS_PATH=${ARCHIVE_PRODUCTS_PATH}&quot;&#10;    fi&#10;}&#10;&#10;# Configure some environment variables and ensure the universal folder exists&#10;configure() {&#10;    UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal&#10;    if [ ! -d &quot;${UNIVERSAL_OUTPUTFOLDER}&quot; ]&#10;    then&#10;    mkdir -p &quot;${UNIVERSAL_OUTPUTFOLDER}&quot;&#10;    fi&#10;    PROJECT_FOLDER=$(dirname &quot;${PROJECT_FILE_PATH}&quot;);&#10;    &#10;    if [ &quot;${CONFIGURATION}&quot; == &quot;&quot; ]&#10;    then&#10;    echo &quot;CONFIGURATION was not defined, setting it to Release&quot;&#10;    CONFIGURATION=Release&#10;    fi&#10;}&#10;&#10;# If we&apos;re going to non-zero exit, lets print out the environment first (again,&#10;# for debugging purposes, this is very useful).&#10;envExit() {&#10;    env;&#10;    exit $@;&#10;}&#10;&#10;# The work is done here, if we haven&apos;t been invoked yet, then go through the&#10;# build steps, and dump the output to the log file.  You&apos;ll note that there are&#10;# no comments in this function.  That&apos;s because the echo statements serve as&#10;# those comments and provide breadcrumbs in the case that we can&apos;t build&#10;buildFramework() {&#10;    &#10;    if [ &quot;true&quot; == ${ALREADYINVOKED:-false} ]&#10;    then&#10;    echo &quot;RECURSION: Detected, stopping&quot;&#10;    else&#10;    export ALREADYINVOKED=&quot;true&quot;&#10;    &#10;    echo &quot;Step 1. Building for iPhoneSimulator&quot;&#10;    xcodebuild -workspace &quot;${WORKSPACE_PATH}&quot; -scheme &quot;${SCHEME_NAME}&quot; -configuration ${CONFIGURATION} -sdk iphonesimulator -destination &apos;platform=iOS Simulator,name=iPhone 6&apos; ONLY_ACTIVE_ARCH=NO ARCHS=&apos;i386 x86_64&apos; BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; ENABLE_BITCODE=YES OTHER_CFLAGS=&quot;-fembed-bitcode&quot; BITCODE_GENERATION_MODE=bitcode clean build&#10;    if [ &quot;$?&quot; != &quot;0&quot; ]&#10;    then&#10;    echo &quot;[ERROR]: FAILED Step 1: Building for iPhoneSimulator&quot;;&#10;    envExit 1&#10;    fi&#10;    &#10;    echo &quot;Step 2. Copy the framework structure (from iphoneos build) to the universal folder&quot;&#10;    cp -R &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}/${FULL_PRODUCT_NAME}&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/&quot;&#10;    if [ &quot;$?&quot; != &quot;0&quot; ]&#10;    then&#10;    echo &quot;[ERROR]: FAILED Step 2: Copy the framework structure (from iphoneos build) to the universal folder&quot;;&#10;    envExit 1&#10;    fi&#10;    &#10;    echo &quot;Step 3. Copy Swift modules from iphonesimulator build (if it exists) to the copied framework directory&quot;&#10;    SIMULATOR_SWIFT_MODULES_DIR=&quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${PROJECT_NAME}.framework/Modules/${PROJECT_NAME}.swiftmodule/.&quot;&#10;    if [ -d &quot;${SIMULATOR_SWIFT_MODULES_DIR}&quot; ]; then&#10;    cp -R &quot;${SIMULATOR_SWIFT_MODULES_DIR}&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/${PROJECT_NAME}.framework/Modules/${PROJECT_NAME}.swiftmodule&quot;&#10;    if [ &quot;$?&quot; != &quot;0&quot; ]&#10;    then&#10;    echo &quot;[ERROR]: FAILED Step 3: Copy Swift modules from iphonesimulator build (if it exists) to the copied framework directory&quot;;&#10;    envExit 1&#10;    fi&#10;    fi&#10;    &#10;    echo &quot;Step 4. Create universal binary file using lipo and place the combined executable in the copied framework directory&quot;&#10;    lipo -create -output &quot;${UNIVERSAL_OUTPUTFOLDER}/${EXECUTABLE_PATH}&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${EXECUTABLE_PATH}&quot; &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}/${EXECUTABLE_PATH}&quot;&#10;    if [ &quot;$?&quot; != &quot;0&quot; ]&#10;    then&#10;    echo &quot;[ERROR]: FAILED Step 4: Create universal binary file using lipo and place the combined executable in the copied framework directory&quot;;&#10;    envExit 1&#10;    fi&#10;    &#10;    echo &quot;Step 5. Create universal binaries for embedded frameworks&quot;;&#10;    FRAMEWORKS_DIR=&quot;${UNIVERSAL_OUTPUTFOLDER}/${PROJECT_NAME}.framework/Frameworks&quot;;&#10;    if [ -e &quot;${FRAMEWORKS_DIR}&quot; ]&#10;    then&#10;    for SUB_FRAMEWORK in $(ls &quot;${FRAMEWORKS_DIR}&quot;)&#10;    do&#10;    BINARY_NAME=&quot;${SUB_FRAMEWORK%.*}&quot;&#10;    lipo -create -output &quot;${UNIVERSAL_OUTPUTFOLDER}/${PROJECT_NAME}.framework/Frameworks/${SUB_FRAMEWORK}/${BINARY_NAME}&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${SUB_FRAMEWORK}/${BINARY_NAME}&quot; &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}/${PROJECT_NAME}.framework/Frameworks/${SUB_FRAMEWORK}/${BINARY_NAME}&quot;&#10;    if [ &quot;$?&quot; != &quot;0&quot; ]&#10;    then&#10;    echo &quot;[ERROR]: FAILED Step 5 (${SUB_FRAMEWORK}): Create universal binaries for embedded frameworks&quot;;&#10;    envExit 1&#10;    fi&#10;    done&#10;    fi&#10;    &#10;    echo &quot;Step 6. Convenience step to copy the framework to the project&apos;s directory&quot;&#10;    yes | cp -Rf &quot;${UNIVERSAL_OUTPUTFOLDER}/${FULL_PRODUCT_NAME}&quot; &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}&quot; &amp;&amp; \&#10;    yes | cp -Rf &quot;${UNIVERSAL_OUTPUTFOLDER}/${FULL_PRODUCT_NAME}&quot; &quot;${PROJECT_FOLDER}&quot;&#10;    if [ &quot;$?&quot; != &quot;0&quot; ]&#10;    then&#10;    echo &quot;[ERROR]: FAILED Step 6: Convenience step to copy the framework to the project&apos;s directory&quot;;&#10;    envExit 1;&#10;    fi&#10;    &#10;    fi&#10;}&#10;&#10;archiveFramework() {&#10;    &#10;    echo &quot;Step 7. Create a zip archive of the framework&quot;&#10;    if [ ! -e &quot;${PROJECT_FOLDER}/${IBSC_MODULE}.framework&quot; ]&#10;    then&#10;    echo &quot;[ERROR]: FAILED Step 7: ${IBSC_MODULE}/${PROJECT_NAME}.framework doesn&apos;t exist&quot;;&#10;    envExit 1;&#10;    fi&#10;    &#10;    cd &quot;${PROJECT_FOLDER}&quot;&#10;    VERSION=$(grep s.version ../${PRODUCT_NAME}.podspec|grep -v s.source|grep -v cocoapods_version|sed &apos;s/s.version//&apos;|sed &apos;s/[^\.,0-9]//g&apos;);&#10;    zip -r &quot;${IBSC_MODULE}-${VERSION}.zip&quot; &quot;${IBSC_MODULE}.framework&quot;&#10;}&#10;&#10;# main function - delegates to the helpers&#10;main() {&#10;    validate;&#10;    configure;&#10;    buildFramework;&#10;    archiveFramework;&#10;    &#10;    open &quot;${PROJECT_FOLDER}&quot;;&#10;}&#10;&#10;main;">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "C9BB475B1E71663A00F3F98C"
                     BuildableName = "OpenVPNAdapter.framework"
                     BlueprintName = "OpenVPN Adapter iOS"
                     ReferencedContainer = "container:OpenVPN Adapter.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PostActions>
   </ArchiveAction>
</Scheme>
